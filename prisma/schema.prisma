generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// mysql
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wallpapers Wallpaper[]
  savedWallpapers SavedWallpaper[]
  likedWallpapers LikedWallpaper[]

  @@map("users")
}

model Wallpaper {
  id          Int                    @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String
  uploadedBy  User                   @relation(fields: [userId], references: [id])
  userId      Int
  categoryId  Int
  category    Category               @relation(fields: [categoryId], references: [id])
  savedBy     SavedWallpaper[]
  likedBy     LikedWallpaper[]
  wallpaperTags WallpaperTag[]
  colorPalettes WallpaperColorPalette[]
  totalSaves  Int                    @default(0)
  totalLikes  Int                    @default(0)
  views       Int                    @default(0)
  width       Int
  height      Int
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@map("wallpapers")
}

enum Role {
  ADMIN
  USER
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  wallpapers Wallpaper[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  wallpapers WallpaperTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

model WallpaperTag {
  id          Int      @id @default(autoincrement())
  wallpaperId Int
  wallpaper   Wallpaper @relation(fields: [wallpaperId], references: [id])
  tagId       Int
  tag         Tag       @relation(fields: [tagId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([wallpaperId, tagId])
  @@map("wallpaper_tags")
}

model SavedWallpaper {
  id          Int      @id @default(autoincrement())
  wallpaperId Int      
  wallpaper   Wallpaper @relation(fields: [wallpaperId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([wallpaperId, userId])
  @@map("saved_wallpapers")
}

model LikedWallpaper {
  id          Int      @id @default(autoincrement())
  wallpaperId Int      
  wallpaper   Wallpaper @relation(fields: [wallpaperId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([wallpaperId, userId])
  @@map("liked_wallpapers")
}

model ColorPalette {
  id          Int                    @id @default(autoincrement())
  color       String
  wallpapers  WallpaperColorPalette[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@unique([color])
  @@map("color_palettes")
}

model WallpaperColorPalette {
  id            Int        @id @default(autoincrement())
  wallpaperId   Int
  colorPaletteId Int
  wallpaper     Wallpaper   @relation(fields: [wallpaperId], references: [id])
  colorPalette  ColorPalette @relation(fields: [colorPaletteId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([wallpaperId, colorPaletteId]) // Prevent duplicate entries
  @@map("wallpaper_color_palettes")
}